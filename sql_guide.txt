use research;

show triggers;

CREATE TABLE roles (
  role_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,  -- Add UNSIGNED for foreign key compatibility
  role_name VARCHAR(100) NOT NULL
) ENGINE=InnoDB;

INSERT INTO roles
VALUES (2, 'users');

CREATE TABLE users (
  uid INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,  -- Mark `uid` as UNSIGNED to match `role_id`
  email VARCHAR(100) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  token TEXT
) ENGINE=InnoDB;

CREATE TABLE user_roles (
  u_role_id INT UNSIGNED,  -- Use UNSIGNED to match the role_id in the roles table
  user_id INT UNSIGNED,    -- Use UNSIGNED to match the uid in the users table
  PRIMARY KEY (u_role_id, user_id),
  FOREIGN KEY (u_role_id) REFERENCES roles(role_id),
  FOREIGN KEY (user_id) REFERENCES users(uid)
) ENGINE=InnoDB;

DELIMITER //
CREATE TRIGGER `after_user_insert` AFTER INSERT ON `users` FOR EACH ROW BEGIN
    -- Insert the new user into the user_roles table with role_id 2 (users role)
    INSERT INTO user_roles (u_role_id, user_id) 
    VALUES (2, NEW.uid);
END
//
DELIMITER ;


CREATE TABLE publications (
  p_id INT PRIMARY KEY AUTO_INCREMENT,
  p_user_id INT UNSIGNED, 
  title TEXT NOT NULL,
  description TEXT,
  p_file_path TEXT,
  p_link TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (p_user_id) REFERENCES users(uid) ON DELETE CASCADE 
) ENGINE=InnoDB;


CREATE TABLE research (
  r_id INT PRIMARY KEY AUTO_INCREMENT,
  r_user_id INT UNSIGNED, 
  title TEXT NOT NULL,
  description TEXT,
  r_file_path TEXT,
  r_link TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (r_user_id) REFERENCES users(uid) ON DELETE CASCADE 
) ENGINE=InnoDB;

CREATE TABLE presentation (
  pr_id INT PRIMARY KEY AUTO_INCREMENT,
  pr_user_id INT UNSIGNED, 
  title TEXT NOT NULL,
  description TEXT,
  pr_file_path TEXT,
  pr_link TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (pr_user_id) REFERENCES users(uid) ON DELETE CASCADE 
) ENGINE=InnoDB;

CREATE TABLE documentation (
  d_id INT PRIMARY KEY AUTO_INCREMENT,
  d_user_id INT UNSIGNED, 
  title TEXT NOT NULL,
  description TEXT,
  d_file_path TEXT,
  d_link TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (d_user_id) REFERENCES users(uid) ON DELETE CASCADE 
) ENGINE=InnoDB;

CREATE TABLE user_logs (
  log_id INT PRIMARY KEY AUTO_INCREMENT,
  l_user_id INT UNSIGNED,  
  activity TEXT NOT NULL,
  table_name VARCHAR(50) NOT NULL, -- The name of the affected table
  log_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  
  -- Foreign key constraint that references the users table with CASCADE rules
  FOREIGN KEY (l_user_id) REFERENCES users(uid) ON DELETE CASCADE ON UPDATE CASCADE
);

DELIMITER //
-- Trigger for INSERT on `users`
CREATE TRIGGER log_user_insert
AFTER INSERT ON users
FOR EACH ROW
BEGIN
  INSERT INTO user_logs (l_user_id, activity, table_name)
  VALUES (NEW.uid, 'INSERT', 'users');
END;
//

-- Trigger for UPDATE on `users`
CREATE TRIGGER log_user_update
AFTER UPDATE ON users
FOR EACH ROW
BEGIN
  INSERT INTO user_logs (l_user_id, activity, table_name)
  VALUES (NEW.uid, 'UPDATE', 'users');
END;
//

-- Trigger for DELETE on `users`
CREATE TRIGGER log_user_delete
AFTER DELETE ON users
FOR EACH ROW
BEGIN
  INSERT INTO user_logs (l_user_id, activity, table_name)
  VALUES (OLD.uid, 'DELETE', 'users');
END;
//
DELIMITER ;


DELIMITER //
-- Trigger for INSERT on `publications`
CREATE TRIGGER log_publications_insert
AFTER INSERT ON publications
FOR EACH ROW
BEGIN
  INSERT INTO user_logs (l_user_id, activity, table_name)
  VALUES (NEW.p_user_id, 'INSERT', 'publications');
END;
//

-- Trigger for UPDATE on `publications`
CREATE TRIGGER log_publications_update
AFTER UPDATE ON publications
FOR EACH ROW
BEGIN
  INSERT INTO user_logs (l_user_id, activity, table_name)
  VALUES (NEW.p_user_id, 'UPDATE', 'publications');
END;
//

-- Trigger for DELETE on `publications`
CREATE TRIGGER log_publications_delete
AFTER DELETE ON publications
FOR EACH ROW
BEGIN
  INSERT INTO user_logs (l_user_id, activity, table_name)
  VALUES (OLD.p_user_id, 'DELETE', 'publications');
END;
//
DELIMITER ;

DELIMITER //
-- Trigger for INSERT on `research`
CREATE TRIGGER log_research_insert
AFTER INSERT ON research
FOR EACH ROW
BEGIN
  INSERT INTO user_logs (l_user_id, activity, table_name)
  VALUES (NEW.r_user_id, 'INSERT', 'research');
END;
//

-- Trigger for UPDATE on `research`
CREATE TRIGGER log_research_update
AFTER UPDATE ON research
FOR EACH ROW
BEGIN
  INSERT INTO user_logs (l_user_id, activity, table_name)
  VALUES (NEW.r_user_id, 'UPDATE', 'research');
END;
//

-- Trigger for DELETE on `research`
CREATE TRIGGER log_research_delete
AFTER DELETE ON research
FOR EACH ROW
BEGIN
  INSERT INTO user_logs (l_user_id, activity, table_name)
  VALUES (OLD.r_user_id, 'DELETE', 'research');
END;
//
DELIMITER ;

DELIMITER //
-- Trigger for INSERT on `presentation`
CREATE TRIGGER log_presentation_insert
AFTER INSERT ON presentation
FOR EACH ROW
BEGIN
  INSERT INTO user_logs (l_user_id, activity, table_name)
  VALUES (NEW.pr_user_id, 'INSERT', 'presentation');
END;
//

-- Trigger for UPDATE on `presentation`
CREATE TRIGGER log_presentation_update
AFTER UPDATE ON presentation
FOR EACH ROW
BEGIN
  INSERT INTO user_logs (l_user_id, activity, table_name)
  VALUES (NEW.pr_user_id, 'UPDATE', 'presentation');
END;
//

-- Trigger for DELETE on `presentation`
CREATE TRIGGER log_presentation_delete
AFTER DELETE ON presentation
FOR EACH ROW
BEGIN
  INSERT INTO user_logs (l_user_id, activity, table_name)
  VALUES (OLD.pr_user_id, 'DELETE', 'presentation');
END;
//
DELIMITER ;

DELIMITER //
-- Trigger for INSERT on `documentation`
CREATE TRIGGER log_documentation_insert
AFTER INSERT ON documentation
FOR EACH ROW
BEGIN
  INSERT INTO user_logs (l_user_id, activity, table_name)
  VALUES (NEW.d_user_id, 'INSERT', 'documentation');
END;
//

-- Trigger for UPDATE on `documentation`
CREATE TRIGGER log_documentation_update
AFTER UPDATE ON documentation
FOR EACH ROW
BEGIN
  INSERT INTO user_logs (l_user_id, activity,table_name)
  VALUES (NEW.d_user_id, 'UPDATE', 'documentation');
END;
//

-- Trigger for DELETE on `documentation`
CREATE TRIGGER log_documentation_delete
AFTER DELETE ON documentation
FOR EACH ROW
BEGIN
  INSERT INTO user_logs (l_user_id, activity, table_name)
  VALUES (OLD.d_user_id, 'DELETE', 'documentation');
END;
//
DELIMITER ;



